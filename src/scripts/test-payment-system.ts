#!/usr/bin/env tsx

/**
 * Script de Testing del Sistema de Pagos
 * 
 * Este script prueba todas las funcionalidades del sistema de pagos:
 * - APIs del backend
 * - Componentes del frontend
 * - Hooks de React
 * - Configuraci√≥n del sistema
 */

import { PAYMENT_CONFIG } from '@/config/payment'

console.log('üß™ Iniciando Testing del Sistema de Pagos...\n')

// Test 1: Configuraci√≥n del Sistema
console.log('üìã Test 1: Verificar Configuraci√≥n del Sistema')
console.log('‚úÖ Token Address:', PAYMENT_CONFIG.BATTLE_TOKEN.ADDRESS)
console.log('‚úÖ Token Symbol:', PAYMENT_CONFIG.BATTLE_TOKEN.SYMBOL)
console.log('‚úÖ Required Amount:', PAYMENT_CONFIG.BATTLE_TOKEN.REQUIRED_AMOUNT)
console.log('‚úÖ Contract Address:', PAYMENT_CONFIG.VENDOR_REGISTRATION.ADDRESS)
console.log('‚úÖ Network:', PAYMENT_CONFIG.VENDOR_REGISTRATION.NETWORK.NAME)
console.log('‚úÖ Chain ID:', PAYMENT_CONFIG.VENDOR_REGISTRATION.NETWORK.CHAIN_ID)
console.log('‚úÖ Rate Limits - Daily:', PAYMENT_CONFIG.RATE_LIMITS.MAX_VENDORS_PER_DAY)
console.log('‚úÖ Rate Limits - Weekly:', PAYMENT_CONFIG.RATE_LIMITS.MAX_VENDORS_PER_WEEK)
console.log('‚úÖ Cooldown Period:', PAYMENT_CONFIG.RATE_LIMITS.COOLDOWN_PERIOD / 60000, 'minutos')
console.log('')

// Test 2: Funciones de Utilidad
console.log('üîß Test 2: Verificar Funciones de Utilidad')
const testAmount = '50000000000000000000' // 50 tokens en wei
const formattedAmount = PAYMENT_CONFIG.formatTokenAmount(testAmount)
const parsedAmount = PAYMENT_CONFIG.parseTokenAmount('50')

console.log('‚úÖ Format Token Amount (50 tokens):', formattedAmount)
console.log('‚úÖ Parse Token Amount (50):', parsedAmount)
console.log('‚úÖ Network Supported (84532):', PAYMENT_CONFIG.isNetworkSupported(84532))
console.log('‚úÖ Network Supported (1):', PAYMENT_CONFIG.isNetworkSupported(1))
console.log('‚úÖ Explorer URL:', PAYMENT_CONFIG.getExplorerUrl('0x123...'))
console.log('')

// Test 3: Validaci√≥n de Datos
console.log('‚úÖ Test 3: Verificar Validaci√≥n de Datos')
const validVendorData = {
  name: 'Tacos El G√ºero',
  description: 'Los mejores tacos de la ciudad con m√°s de 20 a√±os de experiencia',
  delegation: 'Centro',
  category: 'mexican',
  imageUrl: 'https://example.com/tacos.jpg'
}

const invalidVendorData = {
  name: 'A', // Muy corto
  description: 'Corto', // Muy corto
  delegation: '',
  category: '',
  imageUrl: ''
}

const validResult = PAYMENT_CONFIG.validateVendorData(validVendorData)
const invalidResult = PAYMENT_CONFIG.validateVendorData(invalidVendorData)

console.log('‚úÖ Valid Vendor Data:', validResult.isValid)
console.log('‚úÖ Invalid Vendor Data:', invalidResult.isValid)
console.log('‚úÖ Validation Errors:', invalidResult.errors)
console.log('')

// Test 4: Mensajes del Sistema
console.log('üí¨ Test 4: Verificar Mensajes del Sistema')
console.log('‚úÖ Error - Insufficient Balance:', PAYMENT_CONFIG.ERROR_MESSAGES.INSUFFICIENT_BALANCE)
console.log('‚úÖ Error - Wallet Not Connected:', PAYMENT_CONFIG.ERROR_MESSAGES.WALLET_NOT_CONNECTED)
console.log('‚úÖ Success - Tokens Approved:', PAYMENT_CONFIG.SUCCESS_MESSAGES.TOKENS_APPROVED)
console.log('‚úÖ Success - Vendor Registered:', PAYMENT_CONFIG.SUCCESS_MESSAGES.VENDOR_REGISTERED)
console.log('')

// Test 5: Endpoints de la API
console.log('üåê Test 5: Verificar Endpoints de la API')
console.log('‚úÖ Vendor Registration:', PAYMENT_CONFIG.API_ENDPOINTS.VENDOR_REGISTRATION)
console.log('‚úÖ Payment Verification:', PAYMENT_CONFIG.API_ENDPOINTS.PAYMENT_VERIFICATION)
console.log('‚úÖ Payment History:', PAYMENT_CONFIG.API_ENDPOINTS.PAYMENT_HISTORY)
console.log('‚úÖ Payment Stats:', PAYMENT_CONFIG.API_ENDPOINTS.PAYMENT_STATS)
console.log('')

// Test 6: Simulaci√≥n de Flujo de Pago
console.log('üí∞ Test 6: Simular Flujo de Pago')
console.log('üìù Paso 1: Usuario conecta wallet')
console.log('üìù Paso 2: Verificar saldo de $BATTLE tokens')
console.log('üìù Paso 3: Aprobar gasto de 50 tokens')
console.log('üìù Paso 4: Completar formulario de vendor')
console.log('üìù Paso 5: Registrar vendor en blockchain')
console.log('üìù Paso 6: Confirmar transacci√≥n')
console.log('üìù Paso 7: Verificar pago en backend')
console.log('')

// Test 7: Verificaci√≥n de Rate Limiting
console.log('‚è±Ô∏è Test 7: Verificar Rate Limiting')
console.log('‚úÖ M√°ximo por d√≠a:', PAYMENT_CONFIG.RATE_LIMITS.MAX_VENDORS_PER_DAY)
console.log('‚úÖ M√°ximo por semana:', PAYMENT_CONFIG.RATE_LIMITS.MAX_VENDORS_PER_WEEK)
console.log('‚úÖ Cooldown:', PAYMENT_CONFIG.RATE_LIMITS.COOLDOWN_PERIOD / 60000, 'minutos')
console.log('')

// Test 8: Estados de Transacci√≥n
console.log('üîÑ Test 8: Verificar Estados de Transacci√≥n')
console.log('‚úÖ Payment Status:', Object.values(PAYMENT_CONFIG.PAYMENT_STATUS))
console.log('‚úÖ Transaction Status:', Object.values(PAYMENT_CONFIG.TRANSACTION_STATUS))
console.log('')

// Test 9: Configuraci√≥n de Gas
console.log('‚õΩ Test 9: Verificar Configuraci√≥n de Gas')
console.log('‚úÖ Gas Limit:', PAYMENT_CONFIG.TRANSACTION.GAS_LIMIT)
console.log('‚úÖ Max Fee Per Gas:', PAYMENT_CONFIG.TRANSACTION.MAX_FEE_PER_GAS, 'wei')
console.log('‚úÖ Confirmations Required:', PAYMENT_CONFIG.TRANSACTION.CONFIRMATIONS)
console.log('‚úÖ Timeout:', PAYMENT_CONFIG.TRANSACTION.TIMEOUT / 1000, 'segundos')
console.log('')

// Test 10: Validaciones de Imagen
console.log('üñºÔ∏è Test 10: Verificar Validaciones de Imagen')
console.log('‚úÖ Max Image Size:', PAYMENT_CONFIG.VALIDATION.MAX_IMAGE_SIZE / (1024 * 1024), 'MB')
console.log('‚úÖ Allowed Image Types:', PAYMENT_CONFIG.VALIDATION.ALLOWED_IMAGE_TYPES)
console.log('‚úÖ Min Name Length:', PAYMENT_CONFIG.VALIDATION.MIN_NAME_LENGTH)
console.log('‚úÖ Max Name Length:', PAYMENT_CONFIG.VALIDATION.MAX_NAME_LENGTH)
console.log('‚úÖ Min Description Length:', PAYMENT_CONFIG.VALIDATION.MIN_DESCRIPTION_LENGTH)
console.log('‚úÖ Max Description Length:', PAYMENT_CONFIG.VALIDATION.MAX_DESCRIPTION_LENGTH)
console.log('')

console.log('üéâ Testing del Sistema de Pagos Completado!')
console.log('')
console.log('üìä Resumen:')
console.log(`   ‚Ä¢ ${Object.keys(PAYMENT_CONFIG.BATTLE_TOKEN).length} configuraciones de token`)
console.log(`   ‚Ä¢ ${Object.keys(PAYMENT_CONFIG.VENDOR_REGISTRATION).length} configuraciones de contrato`)
console.log(`   ‚Ä¢ ${Object.keys(PAYMENT_CONFIG.ERROR_MESSAGES).length} mensajes de error`)
console.log(`   ‚Ä¢ ${Object.keys(PAYMENT_CONFIG.SUCCESS_MESSAGES).length} mensajes de √©xito`)
console.log(`   ‚Ä¢ ${Object.keys(PAYMENT_CONFIG.API_ENDPOINTS).length} endpoints de API`)
console.log(`   ‚Ä¢ ${Object.keys(PAYMENT_CONFIG.RATE_LIMITS).length} l√≠mites de rate`)
console.log('')
console.log('üöÄ El sistema est√° listo para producci√≥n!')
